
!!! curso de Django CRUD (Create, Read, Update and Delete)
1.- Creamos una carpeta de proyecto llamado: "drf_simple_crud" y lo agreagamos al VSCode.
2.- En comando "CMD" ubicamos la ruta del proyecto y verificamos si tenemos Python instalados, veamos
3.- Estando en la ruta: "C:\Proyectos\Django\drf_simple_crud", verificamos la versión de Python: "python --version"
4.- Ahora creamos un modulo virtual para desarrollar el proyecto, le indicamos el siguiente comando: "py -m virtualenv venv" y esperamos unos minutos, luego revisamos en VSCode que exita la carpeta "venv" en nuestro proyecto.
5.- Estando en VSCode, aplicamos F1 y buscamos "Python:Select Interpeter", y le damos clic a la sugerencia que nos indica.
6.- Verificamos que ya estamos trabajando modulo virtual venv, abrimos una consola y verificamos... Ctrl+Shit+ñ 
7.- En caso de que no se muestre en el terminal el modo virtual, activamos el modulo con: ".\venv\Scripts\activate"
8.- Instalamos Django: "pip install django" y verificamos la versión: "django-admin --version"
9.- Limpiamos consola (venv) y instalamos: "pip install djangorestframework"
10.- Creamos el proyecto: "django-admin startproject drfsamplecrud"
11.- Ahora hay que enlacar nuestro proyecto con una aplicación.
12.- Vamos a crear una app que a través de API que nos permita obtener proyecto, crear proyecto, actualizar proyecto y eliminarlos. Esto se conoce como un "CRUD"
13.- Creamos la apliación en console (env) con el comando: "py manage.py startapp projects"
14.- Ahora en la sección de [INSTALLED_APPS = ] del archivo "Settings.py" le agregamos el nuevo projecto y el módulo de resftframework para que django lo reconozca, veamos...

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "projects",
    "rest_framework",
]

15.- "py manage.py runserver"
16.- *** SECCIÓN: MODELS (Modelo de Datos...)
19.- Vamos a aprender a crear un modelo de proyecto para que se pueda generar la tabla y luego podemos crear nuesto API ya con la tabla creada de la BD.
20.- Para crear un modelo, tenemos que crearlo en el archivo "models.py", veamos...

from django.db import models


# Create your models here.
class Project(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField()
    technology = models.CharField(max_length=200)
    created_at = models.DateTimeField(auto_now_add=True)


21.- Ahora, en console (env) aplicamos el comando "py manage.py makemigrations". Ejecuta la migraciones pendientes en Django.

# Generated by Django 4.2.3 on 2023-07-03 22:47

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('technology', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]

22.- Ahora para poder utilizar la BD, tenemos que aplicar el comando: "py manage.py migrate". Esto hace que Django cree las tablas por defecto de forma automática al igual que la tabla Project que se especificó en "models.py"

(venv) C:\Proyectos\Django\drf_simple_crud>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, projects, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying projects.0001_initial... OK
  Applying sessions.0001_initial... OK

(venv) C:\Proyectos\Django\drf_simple_crud>

23.- *** SECCIÓN: api (UserSerializer y UserViewSet)...
24.- Para mayor documentación... ver lik: "https://www.django-rest-framework.org"
25.- Instalamaos en console env: "pip install markdown"
26.- Instalamos en console env: "pip install django-filter"

(venv) C:\Proyectos\Django\drf_simple_crud>pip install markdown
Collecting markdown
  Using cached Markdown-3.4.3-py3-none-any.whl (93 kB)
Installing collected packages: markdown
Successfully installed markdown-3.4.3

(venv) C:\Proyectos\Django\drf_simple_crud>pip install django-filter
Collecting django-filter
  Downloading django_filter-23.2-py3-none-any.whl (91 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 91.9/91.9 kB 436.6 kB/s eta 0:00:00      
Requirement already satisfied: Django>=3.2 in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from django-filter) (4.2.3)
Requirement already satisfied: asgiref<4,>=3.6.0 in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from Django>=3.2->django-filter) (3.7.2)
Requirement already satisfied: sqlparse>=0.3.1 in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from Django>=3.2->django-filter) (0.4.4)
Requirement already satisfied: tzdata in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from Django>=3.2->django-filter) (2023.3)
Installing collected packages: django-filter
Successfully installed django-filter-23.2

27.- En la carpeta "projects" creamos un archivo llamado: "serializers.py", veamos...
28.- Estos serializers nos van a permitir es poder llamar un modulo especial en rest_framework, veamos...

from rest_framework import serializers
from .models import Project


class ProjectSerializer(serializers.ModelSerializer):
    class Meta:
        model = Project
        fields = ("id", "title", "description", "technology", "created_at")
        read_only_fields = ("created_at",)

		
29.- Ahora crearemos el ViewSet, ya que nos permite consultar el Serializer y que peticiones se pueden hacer o por ejemplo de enviar una serie de autentificaciones para poder hacerlo. 
30.- Ven la carpeta "projects" creamos un archivo llamado "api.py", veamos...

from .models import Project
from rest_framework import viewsets, permissions
from .serializers import ProjectSerializer


class ProjectViewSet(viewsets.ModelViewSet):
    queryset = Project.objects.all()
    permissions_classes = [permissions.AllowAny]
    seralizer_class = ProjectSerializer


31.- Ahora, crearemos el "urls.py", veamos...

from rest_framework import routers
from .api import ProjectViewSet

router = routers.DefaultRouter()
router.register("api/projets", ProjectViewSet, "projects")

urlpatterns = router.urls

32.- tenemos ya las Urls pero mi aplicai+o principal no las conoce, para eso tenemos que ir al "urls.py" del proyecto:

from django.contrib import admin
from django.urls import path, include


urlpatterns = [path("admin/", admin.site.urls), path("", include("projects.urls"))]

33.- En el navegador: http://127.0.0.1:8000/api/projects/    cargamos un registro con POST y nos muestra un contenido tipo Json:

[
    {
        "id": 1,
        "title": "Mi primer proyecto",
        "description": "Utilizando Django Rest Framework",
        "technology": "Python",
        "created_at": "2023-07-04T17:39:03.867066Z"
    }
]

34.- En VSCode vamos a instalar una Extensión llamada: "Thunder Client". Es una extensión de cliente Rest API liviana.
35.- New Request y colocamos la url: http://127.0.0.1:8000/api/projects    y nos muestra:
[
  {
    "id": 1,
    "title": "Mi primer proyecto",
    "description": "Utilizando Django Rest Framework",
    "technology": "Python",
    "created_at": "2023-07-04T17:39:03.867066Z"
  }
]

36.- Ahora, hacemos una petición "POST" , "Body" , "Json": 
{
  "title":"Mi segundo proyecto",
  "description": "Utilizando Thunder Client",
  "technology": "VSCode"
}

37.- Clic botón [Send] y muestra:

{
  "id": 2,
  "title": "Mi segundo proyecto",
  "description": "Utilizando Thunder Client",
  "technology": "VSCode",
  "created_at": "2023-07-04T17:55:36.714332Z"
}

38.- Ahora hacemos una petición "GET" de todos los proyectos y clic en [Send], veamos...

[
  {
    "id": 1,
    "title": "Mi primer proyecto",
    "description": "Utilizando Django Rest Framework",
    "technology": "Python",
    "created_at": "2023-07-04T17:39:03.867066Z"
  },
  {
    "id": 2,
    "title": "Mi segundo proyecto",
    "description": "Utilizando Thunder Client",
    "technology": "VSCode",
    "created_at": "2023-07-04T17:55:36.714332Z"
  }
]
 
39.- También podemos consultar a través de la URL, ejemplo: http://127.0.0.1:8000/api/projects/2   y luego clic botón [Send]
40.- Para Actualizar un campo en específico utilizamos la petición "PATH", veamos un ejemplo del ID:1 actualizamos el "title".

{
  "title":"Utilizando la petición PATHC"
}

41.- En la petición "GET" nos muestra: 

{
  "id": 1,
  "title": "Utilizando la petición PATHC",
  "description": "Utilizando Django Rest Framework",
  "technology": "Python",
  "created_at": "2023-07-04T17:39:03.867066Z"
}

42.- Hasta ahora lo hemos hecho de forma localHost, sin embargo, hay que aprender a ejecutarlo desde la nube con Render, veamos...

43.- *** SECCIÓN: Deploy...
44.- Primero que todo, vamos aa subir el proyecto a un repositorio "GITBUH", en console aplicamos el comando:

(venv) C:\Proyectos\Django\drf_simple_crud>git init
Initialized empty Git repository in C:/Proyectos/Django/drf_simple_crud/.git/

45.- Creamos en la raíz del repositorio el archivo git: ".gitignore" con las líeas de comandos:

db.sqlite3
venv
__pycache__

46.- luego el comando:


(venv) C:\Proyectos\Django\drf_simple_crud>git init              
Reinitialized existing Git repository in C:/Proyectos/Django/drf_simple_crud/.git/

(venv) C:\Proyectos\Django\drf_simple_crud>git add .

(venv) C:\Proyectos\Django\drf_simple_crud>git commit -m "First Commit"
[master (root-commit) 1317241] First Commit
 32 files changed, 670 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 dfrsimplecrud/__init__.py
 create mode 100644 dfrsimplecrud/__pycache__/__init__.cpython-311.pyc
 create mode 100644 dfrsimplecrud/__pycache__/settings.cpython-311.pyc
 create mode 100644 dfrsimplecrud/__pycache__/urls.cpython-311.pyc
 create mode 100644 dfrsimplecrud/__pycache__/wsgi.cpython-311.pyc
 create mode 100644 dfrsimplecrud/asgi.py
 create mode 100644 dfrsimplecrud/settings.py
 create mode 100644 dfrsimplecrud/urls.py
 create mode 100644 dfrsimplecrud/wsgi.py
 create mode 100644 drf_simple_crud.py
 create mode 100644 manage.py
 create mode 100644 projects/__init__.py
 create mode 100644 projects/__pycache__/__init__.cpython-311.pyc
 create mode 100644 projects/__pycache__/admin.cpython-311.pyc
 create mode 100644 projects/__pycache__/api.cpython-311.pyc
 create mode 100644 projects/__pycache__/apps.cpython-311.pyc
 create mode 100644 projects/__pycache__/models.cpython-311.pyc
 create mode 100644 projects/__pycache__/serializers.cpython-311.pyc
 create mode 100644 projects/__pycache__/urls.cpython-311.pyc
 create mode 100644 projects/admin.py
 create mode 100644 projects/api.py
 create mode 100644 projects/apps.py
 create mode 100644 projects/migrations/0001_initial.py
 create mode 100644 projects/migrations/__init__.py
 create mode 100644 projects/migrations/__pycache__/0001_initial.cpython-311.pyc  
 create mode 100644 projects/migrations/__pycache__/__init__.cpython-311.pyc      
 create mode 100644 projects/models.py
 create mode 100644 projects/serializers.py
 create mode 100644 projects/tests.py
 create mode 100644 projects/urls.py
 create mode 100644 projects/views.py

(venv) C:\Proyectos\Django\drf_simple_crud>

215.- Ahora vamos a crear un repositorio "GitHub" (muy importante).
216.- Entramos en la liga "github.com" nos logueamos con nuestra cuenta
217.- En la parte superior derecha, clic en [+] y [New reposotory]
218.- Colocamos el nombre del reposotorio: "django-auth-crud"
219.- Le indicamos que es Publico
220.- Clic al botón [Crear Repositorio]
221.- Copiamos la línea de comando:

51.- Ahora desde la guía de Render vamos a aplicar los comandos que indican, veamos...
50.- Desde el archivo "Settings.py" aplicamos lo siguiente:

# Don't forget to import os at the beginning of the file
import os

52.- "SECRET_KEY "

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')

53.- "DEBUG"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'RENDER' not in os.environ

54.- "ALLOWED_HOST"

# https://docs.djangoproject.com/en/3.0/ref/settings/#allowed-hosts
ALLOWED_HOSTS = []

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
	
55.- Ahora procedemos a configurar la BD "PostgreSQL"...

postgres://drfcrud_lt0n_user:vY3DqpGJq98GZBEZuQuhGfxpEBkjKZZO@dpg-cii6ucmnqql0tc2ddueg-a/drfcrud_lt0n

56.- En console instalamos "dj-database-url psycopg2-binary"

(venv) C:\Proyectos\Django\drf_simple_crud>pip install dj-database-url psycopg2-binary
Collecting dj-database-url
  Using cached dj_database_url-2.0.0-py3-none-any.whl (7.6 kB)
Collecting psycopg2-binary
  Using cached psycopg2_binary-2.9.6-cp311-cp311-win_amd64.whl (1.2 MB)
Requirement already satisfied: Django>=3.2 in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from dj-database-url) (4.2.3)
Collecting typing-extensions>=3.10.0.0 (from dj-database-url)
  Using cached typing_extensions-4.7.1-py3-none-any.whl (33 kB)
Requirement already satisfied: asgiref<4,>=3.6.0 in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from Django>=3.2->dj-database-url) (3.7.2)
Requirement already satisfied: sqlparse>=0.3.1 in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from Django>=3.2->dj-database-url) (0.4.4)
Requirement already satisfied: tzdata in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from Django>=3.2->dj-database-url) (2023.3)
Installing collected packages: typing-extensions, psycopg2-binary, dj-database-url
Successfully installed dj-database-url-2.0.0 psycopg2-binary-2.9.6 typing-extensions-4.7.1

(venv) C:\Proyectos\Django\drf_simple_crud>

57.- Ahora hacemo sel import de: "import dj_database_url" en "Settings.py"
58.- Ahora, "dj_database_url" debemos asignarlo a la varable "DATABASES="

DATABASES = {
    "default": dj_database_url.config(
        # Feel free to alter this value to suit your needs.
        default="postgresql://postgres:postgres@localhost",
        conn_max_age=600,
    )
}

59.-  Instalamos en console: "pip install whitenoise[brotli]"

(venv) C:\Proyectos\Django\drf_simple_crud>pip install whitenoise[brotli]
Collecting whitenoise[brotli]
  Using cached whitenoise-6.5.0-py3-none-any.whl (19 kB)
Collecting Brotli (from whitenoise[brotli])
  Using cached Brotli-1.0.9-cp311-cp311-win_amd64.whl (333 kB)
Installing collected packages: Brotli, whitenoise
Successfully installed Brotli-1.0.9 whitenoise-6.5.0

(venv) C:\Proyectos\Django\drf_simple_crud>

60.- En "MIDDLEWARE" incluir la línea: "'whitenoise.middleware.WhiteNoiseMiddleware',", veamos...

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

61.- En la variable "STATIC_URL"

STATIC_URL = "static/"

if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
	
62.-  En la raíz de nuestro proyecto creamos un archivo llamado "build.sh" y le agregamos el siguiente contenido:

#!/usr/bin/env bash
# exit on error
set -o errexit

#poetry install

python manage.py collectstatic --no-input
python manage.py migrate

63.- Generamos el archivo: "requirements.txt con el comando: "pip freezen > requiremets.txt"

asgiref==3.7.2
Brotli==1.0.9
dj-database-url==2.0.0
Django==4.2.3
django-filter==23.2
djangorestframework==3.14.0
Markdown==3.4.3
psycopg2-binary==2.9.6
pytz==2023.3
sqlparse==0.4.4
typing_extensions==4.7.1
tzdata==2023.3
whitenoise==6.5.0

72.- Ahora incluimos la linea de comando "pip install -r requirements.txt" en el archivo "build.sh"

#!/usr/bin/env bash
# exit on error
set -o errexit

#poetry install
pip install -r requirements.txt

python manage.py collectstatic --no-input
python manage.py migrate

73.- Ahora le damos permisos de ejutable al archivo "build.sh" con el comando: "chmod a+x build.sh" dentro de "Git Bash".

Yazna@Agonzalez MINGW64 /c/Proyectos/Django/drf_simple_crud (master)
$ chmod a+x build.sh
(venv) 
Yazna@Agonzalez MINGW64 /c/Proyectos/Django/drf_simple_crud (master)
$ 
	
74.- Ahora intalamos un modulo nuevo llamado "gunicorn", veamos...

(venv) C:\Proyectos\Django\drf_simple_crud>pip install gunicorn
Collecting gunicorn
  Using cached gunicorn-20.1.0-py3-none-any.whl (79 kB)
Requirement already satisfied: setuptools>=3.0 in c:\proyectos\django\drf_simple_crud\venv\lib\site-packages (from gunicorn) (67.8.0)
Installing collected packages: gunicorn
Successfully installed gunicorn-20.1.0

(venv) C:\Proyectos\Django\drf_simple_crud>

75.- También lo vamos a necesitar en el archivo: "requirements.txt" ejecutamos el comando nuevaente para recrearlo.

(venv) C:\Proyectos\Django\drf_simple_crud>pip freeze < requirements.txt 
asgiref==3.7.2
Brotli==1.0.9
dj-database-url==2.0.0
Django==4.2.3
django-filter==23.2
djangorestframework==3.14.0
gunicorn==20.1.0
Markdown==3.4.3
psycopg2-binary==2.9.6
pytz==2023.3
sqlparse==0.4.4
typing_extensions==4.7.1
tzdata==2023.3
whitenoise==6.5.0

(venv) C:\Proyectos\Django\drf_simple_crud>

76.-
77.-
78.-
79.-
80.-
81.-
82.-
83.-
84.-
85.-
86.-
87.-
88.-
89.-
90.-
91.-
92.-
93.-
94.-
95.-
96.-
97.-
98.-
99.-
100.-
101.-
102.-
103.-
104.-
105.-
106.-
107.-
108.-
109.-
110.-
111.-
112.-
113.-
114.-
115.-
116.-
117.-
118.-
119.-
120.-
121.-
122.-
123.-
124.-
125.-
126.-
127.-
128.-
129.-
130.-
131.-
132.-
133.-
134.-
135.-
136.-
137.-
138.-
139.-
140.-
141.-
142.-
143.-
144.-
145.-
146.-
147.-
148.-
149.-
150.-
151.-
152.-
153.-
154.-
155.-
156.-
157.-
158.-
159.-
160.-
161.-
162.-
163.-
164.-
165.-
166.-
167.-
168.-
169.-
170.-
171.-
172.-
173.-
174.-
175.-
176.-
